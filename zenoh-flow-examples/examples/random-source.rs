//
// Copyright (c) 2017, 2021 ADLINK Technology Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ADLINK zenoh team, <zenoh@adlink-labs.tech>
//

use async_std::sync::Arc;
use rand::Rng;
use std::collections::HashMap;
use zenoh_flow::{
    operator::{DataTrait, FnSourceRun, RunResult, SourceTrait, StateTrait},
    serde::{Deserialize, Serialize},
    types::{ZFContext, ZFLinkId},
    zenoh_flow_macros::ZFState,
};
use zenoh_flow_examples::RandomData;

static SOURCE: &str = "Number";

#[derive(Serialize, Deserialize, Debug, ZFState)]
struct ExampleRandomSource {}

impl ExampleRandomSource {
    fn run_1(_ctx: &mut ZFContext) -> RunResult {
        let mut results: HashMap<ZFLinkId, Arc<dyn DataTrait>> = HashMap::new();
        let mut rng = rand::thread_rng();
        let d = RandomData {
            d: rng.gen::<u64>(),
        };
        results.insert(String::from(SOURCE), Arc::new(d));
        std::thread::sleep(std::time::Duration::from_secs(1));
        Ok(results)
    }
}

impl SourceTrait for ExampleRandomSource {
    fn get_run(&self, ctx: &ZFContext) -> Box<FnSourceRun> {
        match ctx.mode {
            0 => Box::new(Self::run_1),
            _ => panic!("No way"),
        }
    }

    fn get_state(&self) -> Option<Box<dyn StateTrait>> {
        None
    }
}

// //Also generated by macro
zenoh_flow::export_source!(register);

extern "C" fn register(registrar: &mut dyn zenoh_flow::loader::ZFSourceRegistrarTrait) {
    registrar.register_zfsource(
        "sender",
        Box::new(ExampleRandomSource {}) as Box<dyn zenoh_flow::operator::SourceTrait + Send>,
    );
}
