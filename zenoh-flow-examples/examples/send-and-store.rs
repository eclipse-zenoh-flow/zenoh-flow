//
// Copyright (c) 2017, 2021 ADLINK Technology Inc.
//
// This program and the accompanying materials are made available under the
// terms of the Eclipse Public License 2.0 which is available at
// http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
// which is available at https://www.apache.org/licenses/LICENSE-2.0.
//
// SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
//
// Contributors:
//   ADLINK zenoh team, <zenoh@adlink-labs.tech>
//

use std::any::Any;
use std::collections::HashMap;
use zenoh_flow::message::ZFMessage;
use zenoh_flow::operator::{DataTrait, StateTrait};
use zenoh_flow::operator::{
    FnInputRule, FnOutputRule, FnRun, InputRuleResult, OperatorTrait, OutputRuleResult, RunResult,
};
use zenoh_flow::types::{Token, ZFContext, ZFError, ZFLinkId};
use zenoh_flow::{downcast, downcast_mut};
use zenoh_flow_macros::ZFData;

use serde::{Deserialize, Serialize};

use async_std::sync::Arc;

#[derive(Serialize, Deserialize, Debug, Clone, ZFData)]
struct RandomData {
    pub d: u128,
}

#[derive(Serialize, Deserialize, Debug)]
struct SendAndStore {
    pub state: SendAndStoreState,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
struct SendAndStoreState {
    pub x: RandomData,
}

impl StateTrait for SendAndStoreState {
    fn as_any(&self) -> &dyn Any {
        self
    }

    fn as_mut_any(&mut self) -> &mut dyn Any {
        self
    }
}

pub enum SendAndStoreModes {
    Default = 0,
}

impl SendAndStore {
    pub fn new() -> Self {
        Self {
            state: SendAndStoreState {
                x: RandomData { d: 0 },
            },
        }
    }

    pub fn ir_1(_ctx: &mut ZFContext, inputs: &mut HashMap<ZFLinkId, Token>) -> InputRuleResult {
        if let Some(token) = inputs.get(&0) {
            match token {
                Token::Ready(_) => Ok(true),
                Token::NotReady(_) => Ok(false),
            }
        } else {
            Err(ZFError::MissingInput(0))
        }
    }

    pub fn run_1(ctx: &mut ZFContext, inputs: HashMap<ZFLinkId, Arc<dyn DataTrait>>) -> RunResult {
        let mut results: HashMap<ZFLinkId, Arc<dyn DataTrait>> = HashMap::new();
        let mut state = ctx.state.take().unwrap();
        let mut _state = downcast_mut!(SendAndStoreState, state).unwrap();

        if let Some(data) = inputs.get(&0) {
            match downcast!(RandomData, data) {
                Some(d) => {
                    _state.x = (*d).clone();
                    results.insert(0, data.clone());
                    //ctx.update_state(_state);
                    Ok(results)
                }
                None => Err(ZFError::InvalidData(0)),
            }
        } else {
            Err(ZFError::MissingInput(0))
        }
    }

    pub fn or_1(
        _ctx: &mut ZFContext,
        outputs: HashMap<ZFLinkId, Arc<dyn DataTrait>>,
    ) -> OutputRuleResult {
        let mut results = HashMap::new();
        for (k, v) in outputs {
            results.insert(k, Arc::new(ZFMessage::new_deserialized(0, v)));
        }
        Ok(results)
    }
}

impl OperatorTrait for SendAndStore {
    fn get_input_rule(&self, ctx: &ZFContext) -> Box<FnInputRule> {
        match ctx.mode {
            0 => Box::new(Self::ir_1),
            _ => panic!("No way"),
        }
    }

    fn get_output_rule(&self, ctx: &ZFContext) -> Box<FnOutputRule> {
        match ctx.mode {
            0 => Box::new(Self::or_1),
            _ => panic!("No way"),
        }
    }

    fn get_run(&self, ctx: &ZFContext) -> Box<FnRun> {
        match ctx.mode {
            0 => Box::new(Self::run_1),
            _ => panic!("No way"),
        }
    }
}

// //Also generated by macro
zenoh_flow::export_operator!(register);

extern "C" fn register(registrar: &mut dyn zenoh_flow::loader::ZFOperatorRegistrarTrait) {
    registrar.register_zfoperator(
        "send-and-store",
        Box::new(SendAndStore::new()) as Box<dyn zenoh_flow::operator::OperatorTrait + Send>,
    );
}
